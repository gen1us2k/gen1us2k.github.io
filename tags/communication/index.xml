<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Communication on Gen1us2k</title>
    <link>http://gen1us2k.github.io/tags/communication/</link>
    <description>Recent content in Communication on Gen1us2k</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Gen1us2k</copyright>
    <lastBuildDate>Mon, 16 May 2016 20:45:51 +0600</lastBuildDate>
    <atom:link href="http://gen1us2k.github.io/tags/communication/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>О стартапах, программистах, задачах и бизнесе.</title>
      <link>http://gen1us2k.github.io/2016/05/16/how_to_create_tasks/</link>
      <pubDate>Mon, 16 May 2016 20:45:51 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/2016/05/16/how_to_create_tasks/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Зачем долго тянуть время, чтобы сделать все через &amp;ldquo;жопу&amp;rdquo;? Лучше сразу сделать через &amp;ldquo;жопу&amp;rdquo; и еще время останется все исправить&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Хоть в вопросах бизнеса я не совсем компетентен, но постараюсь рассказать о том, как же бизнесу ставить задачи программистам.
По моему мнению, со стороны бизнеса, самый важный показатель - это окупаемость инвестиций. Любое действие бизнеса - это приумножение текущего капитала.
И если вы бизнес на жвачку, то, вам, по сути, и айтишники не нужны. Если вы не технологический стартап, то своя команда айтишников вам тоже не нужна. Обходитесь сервисами, берите их в аренду, до того, как автоматизировать свои процессы, путем написания своего софта.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;В бизнесе нужно фокусироваться на том, что ты лучше всего умеешь. Остальное - аутсорс.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Допустим, у вас были причины, чтобы взять программиста или комманду программистов к себе в штат. Что с ними делать дальше? Как быть?
Как практики стартапов помогут вам экономить на разработке и работать более эффективно?&lt;/p&gt;

&lt;p&gt;По закону Парето, 20% усилий и затрат должны приносить 80% результата и прибыли. Но как быть, если вы в айти ничего не понимаете, но хотите много фич прямо сейчас и сразу?&lt;/p&gt;

&lt;p&gt;С этим отлично помогут практики Lean Startup и Agile. Даже, когда у вас не стартап, эти моменты будут работать.&lt;/p&gt;

&lt;h3 id=&#34;что-такое-стартап:961f67e918c777a3c91b2553c19ab93e&#34;&gt;Что такое стартап?&lt;/h3&gt;

&lt;p&gt;Мы наблюдаем постоянно кучу стартапов. Некоторые выстреливают, некоторые умирают. Но почему оно так? Почему 9 из 10 стартапов обречены на провал?
У каждого стартапа есть план, но Майк Тайсон говорил, что у всех есть план до первого удара.&lt;/p&gt;

&lt;p&gt;Стартап - это не клон большой компании, как все привыкли думать. Стартап - это временная компания, которая проходит циклы развития от стартапа до бизнеса.
Основная его цель - это найти как можно быстрее масштабируемую бизнес-модель.&lt;/p&gt;

&lt;p&gt;Бизнес-модель - это ответ на вопрос “Как вы будете зарабатывать деньги”,&lt;/p&gt;

&lt;p&gt;Таким образом получается полное определение:
Стартап - это временная организация, созданная для поиска масштабируемой, повторяемой и прибыльной  бизнес-модели в условиях экстремальной неопределенности с целью быстрого роста.&lt;/p&gt;

&lt;p&gt;Экстремальная неопределенность - это ситуация, когда не знаете, кто ваш клиент, какие у него проблемы и действительно ли нужен ваш продукт.
Стартап развивается в условиях быстрого роста. Если двигаться медленно, то ничего не получится.
Почему умирают большинство стартапов? Все потому что они не нашли проблему или решение проблемы потребителя. Другими словами их продукт был никому не нужен.&lt;/p&gt;

&lt;h3 id=&#34;принципы-бережливого-стартапа:961f67e918c777a3c91b2553c19ab93e&#34;&gt;Принципы бережливого стартапа&lt;/h3&gt;

&lt;p&gt;Начнем с того, что у стартапа всегда ограничены ресурсы. Это может быть  финансовые, человеческие и любые другие ресурсы.
Методология Lean стартап нацелена на то, чтобы пройти максимальное количество итераций, до тех пор, пока не закончились  ресурсы. У Lean стартапа есть пять принципов:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Предприниматели есть везде. Предпринимательство - это лишь способ мышления и последовательность действий, которая может быть применена где угодно.&lt;/li&gt;
&lt;li&gt;Предпринимательство - это менеджмент. Менеджмент - наука о управлении ресурсами. Каждый предприниматель - управленец по натуре.&lt;/li&gt;
&lt;li&gt;Знание - это результат проверки гипотез. Любой стартап заключен в ряд гипотез. Гипотез о том, кто является клиентом, какую проблему он решает, какую ценность несет.&lt;/li&gt;
&lt;li&gt;Никакое развитие не возможно без накопления знаний. Накопление знаний - самое важное в методологии Lean.&lt;/li&gt;
&lt;li&gt;Цикличность и последовательность проходжения проверки гипотез.

&lt;ol&gt;
&lt;li&gt;Build -&amp;gt; Product&lt;/li&gt;
&lt;li&gt;Measure -&amp;gt; Data&lt;/li&gt;
&lt;li&gt;Learn -&amp;gt; Ideas&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Или по русски если Создать/Провести эксперимент -&amp;gt; Собрать метрики -&amp;gt; Изучить
Билд - проведение эксперимента. На первом этапе - это может быть что угодно: MVP или Landing page. Далее мы собираем метрики. Метрики важнейшие показатели. Они показывают всегда то, что на самом деле происходит. На следующем этапе мы изучаем метрики и понимаем, что мы сделали в результате. На этом этапе мы делаем выводы, формируем новые гипотезы, делаем новый MVP, делаем новый продукт или продолжаем развивать текущий.&lt;/p&gt;

&lt;p&gt;По такому циклу нужно проверять новую гипотезу. Цикл всегда неизменный. Всегда по такому пути мы проверяем каждую новую гипотезу/идею.&lt;/p&gt;

&lt;p&gt;Эффективность стартапа измеряется тем, какое количество итераций мы смогли пройти до тех пор, когда закончились ресурсы.&lt;/p&gt;

&lt;h3 id=&#34;ну-ок-идеи-я-отсеял-более-менее-а-дальше-что:961f67e918c777a3c91b2553c19ab93e&#34;&gt;Ну ок, идеи я отсеял более менее. А дальше что?&lt;/h3&gt;

&lt;p&gt;Хороший путь, еще до постановки задачи программистам - это изучить текущую потребность на рынке. Попробовать сделать первичную оценку. Далее мы описываем проблему клиента. Обычно она состоит из двух подлогов - это проблема и существующие альтернативы. На этом же этапе будет хорошо, если вы найдете первых последователей или евангелистов.&lt;/p&gt;

&lt;h3 id=&#34;ок-лендинг-сделали-евангелисты-есть-пару-mou-подписаны-дальше-то-что:961f67e918c777a3c91b2553c19ab93e&#34;&gt;ОК, лендинг сделали, евангелисты есть, пару MOU подписаны, дальше то что?&lt;/h3&gt;

&lt;p&gt;А дальше, когда вы отсеяли не нужные задачи на уровне лендингов, пользовательских интервью и прочих вариантах - самое время общаться о MVP с программистом. При этом, на этом пути всегда старайтесь двигаться как можно мелкими шагами в реализации идеи. Идите по пути MVP. Так - дешевле.&lt;/p&gt;

&lt;p&gt;Почему?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Вы можете рассписать подробную задачу, которая будет полной. Вы думаете, что рассписав ее и сделав ее один раз, вы больше ее делать не будете.&lt;/li&gt;
&lt;li&gt;Не проходя по пути MVP у вас больше рисков, что изначальное ТЗ было ошибкой.&lt;/li&gt;
&lt;li&gt;Вы потратите больше времени разработчика. А время разработчика - это потраченные деньги.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Идя по пути MVP и мелкими шагами, что вы получаете:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Продукт, который действительно нужен вашим клиентам.&lt;/li&gt;
&lt;li&gt;Разработчик тратит время эффективнее, потому что не делает не нужную работу.&lt;/li&gt;
&lt;li&gt;После каждого спринта/цикла у вас есть готовый продукт, который возвращает вам деньги.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ок-с-этим-разобрались-но-дальше-что:961f67e918c777a3c91b2553c19ab93e&#34;&gt;Ок, с этим разобрались, но дальше что?&lt;/h3&gt;

&lt;p&gt;Всегда, когда вы поставили задачу программисту - вам нужно нести отвественность за запуск этой задачи в продакшне и отбивать инвестиции, затраченные на разработку. Вам тут нужен скилл в Getting Things Done.&lt;/p&gt;

&lt;p&gt;Вы всегда в таком расширенном цикле:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Получить понимание, что задача нужна клиенту&lt;/li&gt;
&lt;li&gt;Получить первых евангелистов&lt;/li&gt;
&lt;li&gt;Поставить задачу на разработку.&lt;/li&gt;
&lt;li&gt;Дождатся поставки готовой задачи на продакшн&lt;/li&gt;
&lt;li&gt;Внедрить в текущие ваши административные и продуктовые процессы.&lt;/li&gt;
&lt;li&gt;Собрать метрики эффективности&lt;/li&gt;
&lt;li&gt;Сгенерить новую идею&lt;/li&gt;
&lt;li&gt;Перейти в пункт 1.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;При этом, важно понимать, что в задаче всегда должна быть проблема, которую нужно решать программисту. Должен быть результат - к чему нужно прийти. Программист всегда должен чувствовать, что он делает что-то важное и нужное для бизнеса. Относитесь к программистам - как к вашим компаньонам, которые помогут вам развивать бизнес и приносить прибыль, и тогда у вас всегда будет мир и процветание.&lt;/p&gt;

&lt;p&gt;Всегда доводите дела до конца. Всегда планируйте мелкими итерациями. Идите по пути эволюции и взращивании вашего продукта.
А вывод отсюда простой: &amp;ldquo;Зачем долго тянуть время, чтобы сделать все через &amp;ldquo;жопу&amp;rdquo;? Лучше сразу сделать через &amp;ldquo;жопу&amp;rdquo; и еще время останется все исправить&amp;rdquo;&lt;/p&gt;

&lt;p&gt;А о том, когда стоит планировать большими итерациями я расскажу в другом посте.Диванный MBA закончил.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>