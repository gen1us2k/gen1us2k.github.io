<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gen1us2k</title>
    <link>http://gen1us2k.github.io/</link>
    <description>Recent content on Gen1us2k</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Gen1us2k</copyright>
    <lastBuildDate>Sat, 09 Apr 2016 22:57:20 +0600</lastBuildDate>
    <atom:link href="http://gen1us2k.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>microservices</title>
      <link>http://gen1us2k.github.io/2016/04/09/microservices/</link>
      <pubDate>Sat, 09 Apr 2016 22:57:20 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/2016/04/09/microservices/</guid>
      <description>&lt;p&gt;Пост, больше для того, чтобы сохранить ссылки себе.
Много интересного материала о микросервисах.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nordicapis.com/writing-microservices-in-go/&#34;&gt;Writing microservices in go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nordicapis.com/writing-microservices-in-go-part-ii-when-not-to-use-go/&#34;&gt;Writing microservices in go parth 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://abdullin.com/golang/&#34;&gt;Go good parts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://nicholasjackson.github.io/microservices/go/building-and-testing-microservices-part1/&#34;&gt;Building and testing microservices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thedotpost.com/2015/11/peter-bourgon-a-case-for-microservices&#34;&gt;Peter bourgon a case for microservices&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto#specifying-field-rules&#34;&gt;Protobuf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yszygk1cpEc&#34;&gt;Advanced testing with Go&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>С чего начать изучать Go?</title>
      <link>http://gen1us2k.github.io/2016/04/01/golang/</link>
      <pubDate>Fri, 01 Apr 2016 21:39:43 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/2016/04/01/golang/</guid>
      <description>

&lt;p&gt;Привет всем!
Так сложилось в жизни, что я уже несколько месяцев пишу на Go.
И этот язык мне нравится. Нравится своей простотой и мощной стандартной библиотекой. Мощной, но не идеальной. Пока-что единственная задача, которую я решал не стандартной библиотекой - это генерация UUID.
Но в интернетах много решений этой проблемы.
На стантартной библиотеке можно делать много хороших вещей. Например сделать полноценный вебсервис, хоть и простой, но полностью на стандартной библиотеке, например &lt;a href=&#34;https://github.com/gen1us2k/slack-typeform&#34;&gt;Slack-typeform&lt;/a&gt;. Сервис, который использует TypeForm для заполнения формы, и автоматически рассылает инвайты в слак, используя API обоих сервисов.&lt;/p&gt;

&lt;h3 id=&#34;с-чего-начать:27e4f973bd3581492ba026d8617cd0db&#34;&gt;С чего начать?&lt;/h3&gt;

&lt;p&gt;Начать можно с хабра &lt;a href=&#34;https://habrahabr.ru/post/269355/&#34;&gt;С чего начать новичку в Go&lt;/a&gt;
Или же можно пойти по оффициальному пути.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tour.golang.org&#34;&gt;Тур по Go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Или же &lt;a href=&#34;http://www.golang-book.com&#34;&gt;Книги по Go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;или &lt;a href=&#34;https://gobyexample.com&#34;&gt;Go на примерах&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;В принципе вам хватит потратить пару часов на туре по Go. Дальше можно писать код.
Из книг рекомендую &amp;ldquo;Язык программирования Go&amp;rdquo; от Кернигана.&lt;/p&gt;

&lt;p&gt;Из видео стоит посмотреть&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=jgVhBThJdXc&#34;&gt;Программирование на Go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=f6kdp27TYZs&#34;&gt;Go Concurrency Patterns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cN_DpYBzKso&#34;&gt;Concurrency is not parallelism&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QDDwwePbDtw&#34;&gt;Anvanced Go concurrency patterns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Позже обязательно к прочтению &lt;a href=&#34;https://gocodecloud.com/blog/2016/03/29/go-vendoring-beginner-tutorial/&#34;&gt;Вендоринг для начинающих&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Тупняк - как чума 21 века</title>
      <link>http://gen1us2k.github.io/2016/03/31/plague/</link>
      <pubDate>Thu, 31 Mar 2016 20:10:50 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/2016/03/31/plague/</guid>
      <description>&lt;p&gt;Очень полезный доклад о личной эффективности. Он фишку сечет и информацию доносит очень хорошо.&lt;/p&gt;

&lt;p&gt;Вам знакома ситуация, когда вы зашиваетесь? Когда куча тасков в issue трекере, когда куча не отвеченных емейлов? Тогда это видео вам будет полезно к просмотру&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/RbOkgLa1XjM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Как я проходил собеседование в Яндекс</title>
      <link>http://gen1us2k.github.io/2016/03/31/yandex/</link>
      <pubDate>Thu, 31 Mar 2016 19:55:34 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/2016/03/31/yandex/</guid>
      <description>

&lt;h3 id=&#34;как-все-начиналось:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Как все начиналось&lt;/h3&gt;

&lt;p&gt;Все началось с того, что я решил не много разнообразить свои будни тем, чтобы по проходить всякие разные интервью.
По совету пары людей устроил себе собеседования вечерами с разными компаниями.
Мой выбор пал на страны СНГ, потому как мой устный английский, как я считаю не очень хорош для того, чтобы проходить интервью у западных работодателей.&lt;/p&gt;

&lt;p&gt;Решил устроить максимум 4-5 собеседований в неделю и 1-2 тестовых задания.
Все собеседования были по скайпу, я получил пару джоб офферов в Москву, и отказался от них по ряду причин. Первая причина - финансовая. Так как Москва сама по себе дорогой город и 120к сейчас в Москве - это не 120к до обвала рубля. Плюс к этому ребята с проекта meshbird, который мы пилили на хакатоне GopherGala не советовали суваться в РФ, потому как рабочая сила сейчас там очень дешевая. Даже дешевле Индии. Вторая причина - не совсем интересный проект для меня, в котором было бы много рутины и задачи ниже среднего. Третья причина - хипстеры и не серьезные будущие коллеги.&lt;/p&gt;

&lt;h3 id=&#34;как-я-решил-податься-в-яндекс-и-подача-самого-резюме:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Как я решил податься в Яндекс, и подача самого резюме&lt;/h3&gt;

&lt;p&gt;В феврале, по совету моего знакомого я решил взять триалку Job Seeker на Linkedin. После пары недель юзания его, мне на почту свалилось от него предложение со списком компаний, куда можно отправить резюме. Среди них был и Яндекс. Послал резюме на позицию Python Developer. Подавал через Linkedin.&lt;/p&gt;

&lt;h3 id=&#34;этап-1-тз-и-hr:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Этап 1. ТЗ и HR&lt;/h3&gt;

&lt;p&gt;Через пару дней после подачи мне написала HR и выслала тестовое задание.
Суть тз была в том, чтобы написать консольную утилиту для фильтрации логов в json формате и чтобы выдавала логи в разном формате, который можно менять. Читает с stdin. Пример использования: cat log | json-log &amp;ndash;filter filter &amp;ndash;template=some_template.d2
Тулзу запилил и отправил HR менеджеру.&lt;/p&gt;

&lt;h3 id=&#34;этап-2-интервью-с-техническим-специалистом-яндекса:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Этап 2. Интервью с техническим специалистом Яндекса.&lt;/h3&gt;

&lt;p&gt;Через пару дней, на телефон позвонила HR и мы договорились о интервью по скайпу. Время и дату назначили и закончили разговор с ней.
В назначенное время в скайп добавился человек, мы с ним созвонились и около часу говорили на всякие разные отвлеченные темы. Среди тем были:
- Сколько вообще программирую
- На каких языках программировал и в паре слов рассказать какие понравились, какие нет
- Отношение к код ревью, качеству кода и прочим вещам
В целом довольно мило пообщались и договорились о том, что он передает все HR, и вполне возможно пригласят на очное интервью в Москву.&lt;/p&gt;

&lt;h3 id=&#34;этап-3-договор-о-очном-интервью:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Этап 3. Договор о очном интервью.&lt;/h3&gt;

&lt;p&gt;Через несколько дней после скайпа, ко мне постучалась еще одна HR. Она сказала, что меня хотят пригласить на очное интервью в Москву. Задала мне три вопроса:
- Чем бы я хотел заниматься в Яндексе(инфраструктура, какой-нибудь проект и так далее)
- На каких языках я программирую
- На каких языках я бы хотел программировать.
После того, как она получила ответы, она сказала, что меня хотят видеть в Москве. Сказала, что в моем случае будет 4-5 секций по часу. Время выбрали с 12 до 17.
В течение пары дней были куплены Яндексом билеты на мое имя, даны инструкции, о том, как добраться до их офиса, как добраться с аэропортов и кого спрашивать на ресепшне.&lt;/p&gt;

&lt;h3 id=&#34;этап-4-вылет:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Этап 4. Вылет.&lt;/h3&gt;

&lt;p&gt;Билеты на руках, инструкции сохранил. Так как я снова еду в другой большой и не понятный для меня город, то ставлю на телефон приложения Maps.me - это оффлайн карты. Качаю карту Москвы, ставлю Яндекс.Метро, чтобы ориентироваться в Метро.
Эти два приложения мои помошники в любом не знакомом мне городе. Имея их, вы точно не заблудитесь нигде, где есть более-менее полные карты в OpenStreetMap.
17 числа, утром еду в аэропорт, торчу в нем 2 часа, дальше лечу 4 часа в самолете, и вот, в 7:55 я уже в Шереметьево.
Так как я в Москве, то включил в аэропорту москвича, и быстрым шагом пошел по направлению к аэроэкспрессу.
Купил билет за 470 рублей, сел на ближайший поезд и приехал на Белорусский вокзал через 45 минут пути.
Добрая кассирша дала мне буклетик с расписанием поездов, в котором все рейсы, во все аэропорта с точным временем прибытия и отправки.
После вокзала нашел метро, купил два проезда в метро, доехал на нем до станции &amp;ldquo;Парк Культуры&amp;rdquo; и пошел искать офис.
В этот раз GPS в телефоне не смог определить мое местоположение и пришлось добираться, спрашивая у прохожих.
И вот я добрался.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lmndeit.kg/wp-content/uploads/2016/03/yandex-hr.jpg&#34; alt=&#34;Yandex&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Пришел на ресепшн и меня вскоре проводили до места собеседования.&lt;/p&gt;

&lt;h3 id=&#34;этап-5-первое-интервью-алгоритмы-и-структуры-данных:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Этап 5. Первое интервью. Алгоритмы и структуры данных&lt;/h3&gt;

&lt;p&gt;Интересная секция, вел ее разработчик Яндекс почты.
Было три задачи&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Есть стек. У него есть четыре метода&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;push - кладет данные в стек&lt;/li&gt;
&lt;li&gt;pop - удаляет элемент из стека&lt;/li&gt;
&lt;li&gt;top - возврашает верхний элемент стека&lt;/li&gt;
&lt;li&gt;empty - проверка на пустой стек
Нужно его отсортировать&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Есть два односвязных массива, у которых есть общая часть. Нужно выяснить индексы массивов, с которых начинается общая часть.
Примеры массивов:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a b c x y z&lt;/li&gt;
&lt;li&gt;d e a d b e e f x y z&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Есть функция rand2 которая возвращает 0 и 1 с равной вероятностью. Нужно написать функцию rand3, которая с равной вероятностью возвращает 0 1 и 2.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;этап-6-второе-интервью-архитектуры:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Этап 6. Второе интервью. Архитектуры&lt;/h3&gt;

&lt;p&gt;В этой секции мы поговорили о проектировании архитектуры и спроектировали чат, который должен уметь масштабироваться. Почему чат? Потому что это в последнее время модно. После того, как закончили с чатом, была задача на обработку и повторение задачи, если она на каком-то этапе завершилась с ошибкой. Как автоматизировать повтор действия на всякие разные фейлы, например не доступна база, не доступна одно стороннее АПИ, или второе, или еще какой-нибудь из компонентов.&lt;/p&gt;

&lt;h3 id=&#34;этап-7-третье-интервью-програмирование-на-питоне:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Этап 7. Третье интервью. Програмирование на питоне.&lt;/h3&gt;

&lt;p&gt;В этой части нужно было написать декоратор, который пре серелизует любые данные, заменяя при этом &lt;code&gt;date&lt;/code&gt; на &lt;code&gt;&amp;quot;%Y-%m-%dT00:00:00&amp;quot;&lt;/code&gt;, &lt;code&gt;datetime&lt;/code&gt; на &lt;code&gt;&amp;quot;%Y-%m-%dT%H:%M:%S&amp;quot;&lt;/code&gt;. При этом, возвращать должна следующее
&lt;code&gt;[True, response]&lt;/code&gt; - если есть открытый файл
&lt;code&gt;[False, response]&lt;/code&gt; - если нет файла.&lt;/p&gt;

&lt;p&gt;Например:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
    {
        &amp;quot;name&amp;quot;: &amp;quot;Will&amp;quot;,
        &amp;quot;age&amp;quot;: 26,
        &amp;quot;birth&amp;quot;: &amp;quot;2015-01-02T00:00:00&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;этап-8-четвертое-интервью-практическое-админство:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Этап 8. Четвертое интервью. Практическое админство.&lt;/h3&gt;

&lt;p&gt;В этой части. Было много разборок с линуксом.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Как узнать текущих залогиненых пользователей&lt;/li&gt;
&lt;li&gt;Почему их не показывает&lt;/li&gt;
&lt;li&gt;Убить все процессы, по определенному паттерну, без pkill -f&lt;/li&gt;
&lt;li&gt;Выяснить, с какой директории был запущен скрипт&lt;/li&gt;
&lt;li&gt;Как работает память в Linux&lt;/li&gt;
&lt;li&gt;Модель OSI&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;итог:c31a51a708fa01c7bfe111687ae6852b&#34;&gt;Итог.&lt;/h3&gt;

&lt;p&gt;В конечном итоге были сделаны следующие выводы:
1. Мне нужно подтягивать алгоритмы и некоторые академические моменты.
2. В любой более менее крупной компании (Яндекс, Дропбокс, Убер и тд) требуются знания алгоритмов
3. Диплом нужен чаще всего только для релокейта и получения некоторых ништяков, которые не получают люди без диплома
4. Все компании ценят больше практический опыт с хорошим уровнем теории.&lt;/p&gt;

&lt;p&gt;На этом все.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Сontact</title>
      <link>http://gen1us2k.github.io/page/contact/</link>
      <pubDate>Thu, 31 Mar 2016 19:51:42 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/page/contact/</guid>
      <description>&lt;p&gt;Nothing to do here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Обо мне</title>
      <link>http://gen1us2k.github.io/page/about/</link>
      <pubDate>Thu, 31 Mar 2016 19:50:32 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/page/about/</guid>
      <description>&lt;p&gt;Работаю в Namba Taxi. Пишу код на Python/Go. Разбираюсь с интересными задачами.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ariadna. Зачем нужен еще один геокодер для ОСМ?</title>
      <link>http://gen1us2k.github.io/2016/03/31/ariadna/</link>
      <pubDate>Thu, 31 Mar 2016 19:45:23 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/2016/03/31/ariadna/</guid>
      <description>

&lt;p&gt;Всем привет!&lt;/p&gt;

&lt;p&gt;Совсем недавно я закончил делать геокодер для своих целей &lt;a href=&#34;https://github.com/gen1us2k/ariadna&#34;&gt;Ariadna&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;В статье не будет ни строчки кода на Go.  Зато будет полное описание работы геокодера и проблем, с которыми я встречался. А код можете посмотреть на гитхабе.&lt;/p&gt;

&lt;h3 id=&#34;предыстория:ef594d42b562dc51868faca891ac3a45&#34;&gt;Предыстория&lt;/h3&gt;

&lt;p&gt;Я работаю в одной из бишкекских служб такси, что в Кыргызстане. Решили мы пооптимизировать нахождение координат по адресу для более оптимального распределения заказов.&lt;/p&gt;

&lt;p&gt;Чего у нас нет:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Полной карты Яндекса, Гугла или 2Гис&lt;/li&gt;
&lt;li&gt;Доверия к GPS данным&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Что у нас есть:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Очень разношерстные данные на входе&lt;/li&gt;
&lt;li&gt;Openstreetmap&lt;/li&gt;
&lt;li&gt;Своя накопленная база адресов с координатами&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;что-пользователи-могут-вводить:ef594d42b562dc51868faca891ac3a45&#34;&gt;Что пользователи могут вводить?&lt;/h3&gt;

&lt;p&gt;Пользователи могут вводить адреса в разных форматах:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Улица дом&lt;/li&gt;
&lt;li&gt;Перекресток&lt;/li&gt;
&lt;li&gt;Название заведения&lt;/li&gt;
&lt;li&gt;Название точки&lt;/li&gt;
&lt;li&gt;микрорайон дом&lt;/li&gt;
&lt;li&gt;микрорайон улица дом&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;И таких вариантов  очень много, например
Киевская 28
Киевская Советская
5-42
5 микрорайон советская 42
ЦУМ
кафе у Ашота
шлагбаум
И так далее&lt;/p&gt;

&lt;h3 id=&#34;постановка-задачи:ef594d42b562dc51868faca891ac3a45&#34;&gt;Постановка задачи&lt;/h3&gt;

&lt;p&gt;Сделать геокодер, который бы умел принимать любые данные на вход и отдавать им координаты
Язык поиска - только русский.&lt;/p&gt;

&lt;h3 id=&#34;как-докатился-до-такой-жизни:ef594d42b562dc51868faca891ac3a45&#34;&gt;Как докатился до такой жизни&lt;/h3&gt;

&lt;p&gt;Перед тем, как делать свой велосипед я решил поресерчить решения, которые уже есть.
Были:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pelias/pelias&#34;&gt;Pelias&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/twain47/Nominatim&#34;&gt;Nominatim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://photon.komoot.de/&#34;&gt;Photon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Чем не устраивал номинатим, который у нас был:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Сложен сам по себе&lt;/li&gt;
&lt;li&gt;Сделан на php+с(Это не потому что пхп плохой, а потому что только для этого инструмента у нас стоит апач и пхп)&lt;/li&gt;
&lt;li&gt;Сложная логика в хранимых процедурах Postgresql&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Чем понравился Pelias:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Может работать с многими источниками геоданных&lt;/li&gt;
&lt;li&gt;Поиск организован на ElasticSearch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;В итоге решил отказаться от всех трех геокодеров и сделать свой инструмент по нескольким причинам:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Я хочу разобраться с данными в OSM и импортить только нужные для поиска&lt;/li&gt;
&lt;li&gt;Я могу обрабатывать геоданные перед занесением в индекс&lt;/li&gt;
&lt;li&gt;Мне не нравится жаваскрипт и node.js, отсюда и не желание делать поиск на основе пелиаса&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;проектирование:ef594d42b562dc51868faca891ac3a45&#34;&gt;Проектирование&lt;/h3&gt;

&lt;p&gt;Был заложен следующий алгоритм:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Сначала получаем геометрию по крупным населенным пунктам(города, столицы, деревни, жилые массивы)&lt;/li&gt;
&lt;li&gt;Выгружаем все возможные адреса и соотносим их к нужному жилому массиву, городу и другому населенному пункту, выставляя нужное значение&lt;/li&gt;
&lt;li&gt;Выгружаем все дороги&lt;/li&gt;
&lt;li&gt;Ищем пересечение дорог&lt;/li&gt;
&lt;li&gt;Кладем все в индекс&lt;/li&gt;
&lt;li&gt;Ищем&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Для реализации я выбрал Go, учитывая проекты типа &lt;a href=&#34;https://github.com/pelias/pbf2json&#34;&gt;pbf2json&lt;/a&gt;, &lt;a href=&#34;github.com/kellydunn/golang-geo&#34;&gt;golang-geo&lt;/a&gt; и многих других для обработки геоданных. Также хотелось покачать скилл именно в нем.&lt;/p&gt;

&lt;h3 id=&#34;реализация:ef594d42b562dc51868faca891ac3a45&#34;&gt;Реализация&lt;/h3&gt;

&lt;p&gt;С получением и парсингом данных с осм вроде разобрался. Для жилых массивов используем теги place=city,place=village,place=suburb,place=town,place=neighbourhood для фильтрации. Для получения адресов, зданий addr:street+addr:housenumber,amenity,shop,addr:housenumber
Все дороги можно получить с помощью тега highway&lt;/p&gt;

&lt;p&gt;Встали сложности с поиском англоязычных названий на русском языке. Как пробовал это решить:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Простая автоматическая транслитерация в русский. В итоге получалось абсурдной и не корректной. Пример конвертации данных был таким: City House -&amp;gt; Цити Хоусе&lt;/li&gt;
&lt;li&gt;Давай попробуем преобразовывать так. Получать транскрипцию слова и ее уже транслитерировать. Получилось что-то вроде Adrenaline rush -&amp;gt; Эрденалин Рэш. Сносно, но нужен русский акцент, типа адреналин раш.&lt;/li&gt;
&lt;li&gt;Подошел такой механизм. Автоматически транслитеризуем все данные, применяя словарь замен. Все-таки простая и тупая транслитерация работает сносно. Словарь наполнился в принципе быстро через несколько прогонов на данных.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;С этим разобрались к этому моменту мы уже получаем данные, которые:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Нормализированы и приведены к русскому языку&lt;/li&gt;
&lt;li&gt;адреса приведены к формату Страна, город, село или поселок, микрорайон или жилой массив, улица, дом&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Следующая часть квеста - найти пересечения дорог. Сделал ее по быстрому и получил очень медленную реализацию, сложностью O(n^2). Как временный выход использую Postgres+postgis для нахождения пересечений, пока не нашел хорошего алгоритма для поиска пересечений.&lt;/p&gt;

&lt;p&gt;В итоге получился хороший парсер данных с осм, который кладет данные в ElasticSearch. Который получил простое название importer&lt;/p&gt;

&lt;h3 id=&#34;автоматизируй-это:ef594d42b562dc51868faca891ac3a45&#34;&gt;Автоматизируй это&lt;/h3&gt;

&lt;p&gt;Учитывая то, что постоянно выкачивать и создавать индексы в эластиксерче в скоре надоело, появился компонент updater. Появилась также автоматическая конфигурация в JSON формате.&lt;/p&gt;

&lt;p&gt;Процесс выкачивания файла и импорт его в elastic search автоматизировался. Плюс к этому появилась возможность обновлять данные в эластиксерче без даунтайма, благодаря алиасам.&lt;/p&gt;

&lt;p&gt;Как это работает:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Updater качает файл&lt;/li&gt;
&lt;li&gt;Узнает текущую версию индекса с конфига&lt;/li&gt;
&lt;li&gt;Инкрементит версию и создает новый индекс&lt;/li&gt;
&lt;li&gt;Заполняет его данными&lt;/li&gt;
&lt;li&gt;Меняет алиасы&lt;/li&gt;
&lt;li&gt;Удаляет старый индекс&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Получил такие бенефиты от этого:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Пишем конфиг&lt;/li&gt;
&lt;li&gt;Запускаем ./ariadna update&lt;/li&gt;
&lt;li&gt;Идем пить кофе&lt;/li&gt;
&lt;li&gt;Получаем готовый настроенный индекс.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Также для удобства прикрутил простой вебинтерфейс с картой и возможностью поиска.&lt;/p&gt;

&lt;h3 id=&#34;автоматическое-пополнение-данными:ef594d42b562dc51868faca891ac3a45&#34;&gt;Автоматическое пополнение данными&lt;/h3&gt;

&lt;p&gt;Помимо ОСМ у нас еще есть много водителей и операторы, которые забивают заказы.
Соотвественно у нас есть имя и координаты
Сделана такая схема:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Треки водителей хранятся в индексе drivers_data&lt;/li&gt;
&lt;li&gt;Данные с ОСМ хранятся в индексе osm_data&lt;/li&gt;
&lt;li&gt;Объединены они через алиас addresses по которому и происходит поиск адресов&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Данные от водителей заносятся, если у нас погрешность в определенных координатах больше, чем 200 метров.&lt;/p&gt;

&lt;h3 id=&#34;итого:ef594d42b562dc51868faca891ac3a45&#34;&gt;Итого&lt;/h3&gt;

&lt;p&gt;Получился геокодер который умеет:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Искать координаты по синонимам. например ШВК - ШампанВинКомбинат&lt;/li&gt;
&lt;li&gt;Умеет искать адреса в определенном радиусе (например для себя с сделал поиск адресов в 30 км от центра города)&lt;/li&gt;
&lt;li&gt;Искать по названию заведений (кафе у Ашота например)&lt;/li&gt;
&lt;li&gt;Искать перекрестки&lt;/li&gt;
&lt;li&gt;Искать адреса в микрорайонах и жил массивах&lt;/li&gt;
&lt;li&gt;Делать реверс геокодинг&lt;/li&gt;
&lt;li&gt;Автоматически пополнятся новыми данными от водителей&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Состоит из трех компонентов:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Импортер данных&lt;/li&gt;
&lt;li&gt;Апдейтер данных&lt;/li&gt;
&lt;li&gt;Веб интерфейс&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;минусы:ef594d42b562dc51868faca891ac3a45&#34;&gt;Минусы&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Протестирован только для Кыргызстана&lt;/li&gt;
&lt;li&gt;Нет демки&lt;/li&gt;
&lt;li&gt;Нет поддержки всех схем адресации&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Поэтому надеюсь кто-нибудь поможет его допилить и для хорошего поиска по другим странам и городам.&lt;/p&gt;

&lt;p&gt;Если кому-то проект показался интересным, то я не против  любой критики, пул реквестов, issues на гитхабе и фидбека в целом.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Модели Django и решение проблем с конкурентным доступом к данным</title>
      <link>http://gen1us2k.github.io/2016/03/31/django-concurrency-text/</link>
      <pubDate>Thu, 31 Mar 2016 19:41:40 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/2016/03/31/django-concurrency-text/</guid>
      <description>

&lt;p&gt;Всем привет!&lt;/p&gt;

&lt;h3 id=&#34;стартовые-данные:e2f056526bbd4a54e575d3c82eb65050&#34;&gt;Стартовые данные&lt;/h3&gt;

&lt;p&gt;2 сервера с Django, запущенные под uWSGI
1-2k запросов в секунду
Проект с движением денег внутри&lt;/p&gt;

&lt;h3 id=&#34;что-дальше:e2f056526bbd4a54e575d3c82eb65050&#34;&gt;Что дальше?&lt;/h3&gt;

&lt;p&gt;Допустим мы реализуем метод обновления баланса для пользователя. И этот метод выглядит так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Profile(models.Model):
...
    def update_balance(self, balance):
        self.balance += balance
        self.save()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В этом случае, если нам придут два одновременных запроса на обновление баланса, то баланс обновит только второй запрос, потому что последний запрос вытеснил первый и взял старые данные.&lt;/p&gt;

&lt;p&gt;На этом этапе на помощь нам приходит метод &lt;code&gt;F&lt;/code&gt; в связке с &lt;code&gt;.update()&lt;/code&gt;
&lt;code&gt;F()&lt;/code&gt; возвращает нам значение из базы в актуальном состоянии. и предыдущий участок можно записать так&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Profile(models.Model):
...
    def update_balance(self, balance):
        Profile.objects.\
            filter(pk=self.pk)\
           .update(balance=F(&#39;balance&#39;) + balance)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В этом случае мы всегда получаем актуальное значение поля и некоторые скажут, что этот способ решает нам проблему, но это не так. В этом случае, хоть и реализовано все правильно, как мы считаем, но проблему это не решает.&lt;/p&gt;

&lt;p&gt;В этом случае приходит к нам на помощь транзакции на уровне БД.&lt;/p&gt;

&lt;h3 id=&#34;что-это-такое-транзакции-и-как-это-использовать:e2f056526bbd4a54e575d3c82eb65050&#34;&gt;Что это такое транзакции и как это использовать?&lt;/h3&gt;

&lt;p&gt;Начнем с того, что в Django 1.4.x и 1.5.x можно включить Transaction Middleware. В Django 1.6+ ее заменили на константу ATOMIC_REQUESTS, которую можно включить к каждой БД использующейся в проекте.&lt;/p&gt;

&lt;p&gt;Работают они следующим образом. Когда к нам пришел запрос и перед тем как передать этот запрос на обработку во view Django открывает транзакцию. Если запрос был отработан без исключений, то делается commit в БД или rollback, если выскочило исключение.&lt;/p&gt;

&lt;p&gt;Разница между &lt;code&gt;ATOMIC_REQUESTS&lt;/code&gt; и Middleware в том, что Middleware включается для всего проекта, а ATOMIC_REQUESTS можно использовать для одной или нескольких БД.&lt;/p&gt;

&lt;p&gt;Минус использования этого подхода в том, что создается оверхед на базу данных.
В этом случае нам на помощь приходит ручное управление транзакциями.&lt;/p&gt;

&lt;h3 id=&#34;ручное-управление-транзакциями:e2f056526bbd4a54e575d3c82eb65050&#34;&gt;Ручное управление транзакциями&lt;/h3&gt;

&lt;p&gt;Django предоставляет множество вариантов работы с помощью модуля django.db.transaction&lt;/p&gt;

&lt;p&gt;Рассмотрим один из возможных способов ручного управления — это transaction.atomic&lt;/p&gt;

&lt;p&gt;transaction.atomic является и методом и декоратором и используется только для view методов.&lt;/p&gt;

&lt;p&gt;Обезопасить покупку товара можно, обернув view в декоратор. Например&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from django.db import transaction
...
@transaction.atomic
def buy_something(request):
    ....
    request.user.update_balance(money)
    return render(request, template, data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;В этом случае мы включили атомарность транзакции для покупки товара. Всю ответственность за целостность данных переложили на БД и атомарность решает нашу проблему.&lt;/p&gt;

&lt;p&gt;Еще в связке с атомарными транзакциями можно использовать &lt;code&gt;select_for_update&lt;/code&gt; метод.
В этом случае изменяемая строка будет блокироваться на изменение до тех пор, пока не вызовется update.
Наш метод обновления баланса можно записать теперь так:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Profile(models.Model):
...
    def update_balance(self, balance):
        Profile.objects.select_for_update().\
            filter(pk=self.pk)\
           .update(balance=F(&#39;balance&#39;) + balance)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;выводы:e2f056526bbd4a54e575d3c82eb65050&#34;&gt;Выводы:&lt;/h3&gt;

&lt;p&gt;Атомарность приходит на помощь
Делайте атомарными только критически важные участки кода
Используйте select for update для блокировки данных во время изменения
По возможности старайтесь делать транзакции как можно короче, чтобы не блокировать работу с данными в БД.&lt;/p&gt;

&lt;p&gt;Дополнительно: про уровни транзакций в MySQL рассказали &lt;a href=&#34;https://habrahabr.ru/post/135217/&#34;&gt;«MySQL: уровни изоляции транзакций».&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Решение конкурентного доступа к данным в Django</title>
      <link>http://gen1us2k.github.io/2016/03/31/django-concurrency/</link>
      <pubDate>Thu, 31 Mar 2016 18:33:21 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/2016/03/31/django-concurrency/</guid>
      <description>&lt;p&gt;Рассказывал недавно о том, как писать код в джанговских моделях без рейс кондишнов и конкурентного доступа к данным.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/H2vzpGQ57r0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Как мы домены мониторили</title>
      <link>http://gen1us2k.github.io/2016/03/31/domains/</link>
      <pubDate>Thu, 31 Mar 2016 17:58:02 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/2016/03/31/domains/</guid>
      <description>

&lt;p&gt;Всем привет! Все началось с того, что у нас в компании развелось очень много доменов которые нужно вовремя продлевать. И вот, после одного провала с продлением доменов, было принято решение начать мониторить дату истечения домена и выводить его в мониторинге Nagios.&lt;/p&gt;

&lt;h4 id=&#34;как-мониторить:ab1b71fc907eef6a6ae61cecfc19728a&#34;&gt;Как мониторить?&lt;/h4&gt;

&lt;p&gt;У нас было несколько доменов в зонах kz, ru, kg, ge, com.&lt;/p&gt;

&lt;p&gt;Самый простой способ узнать всю нужную информацию о домене — запустить whois. Это по идее должен знать каждый. Но как все это дело внедрить в мониторинг?&lt;/p&gt;

&lt;h4 id=&#34;чем-мониторить:ab1b71fc907eef6a6ae61cecfc19728a&#34;&gt;Чем мониторить?&lt;/h4&gt;

&lt;p&gt;Покопавшись по просторам интернета, был найден модуль &lt;a href=&#34;https://pypi.python.org/pypi/python-whois&#34;&gt;python-whois&lt;/a&gt;.
Он хорошо выполнял свою работу для доменов com, net и кучи других доменов, описанных в описании к модулю.&lt;/p&gt;

&lt;p&gt;Не хватало функционала для нескольких доменов в зонах kg.&lt;/p&gt;

&lt;p&gt;В итоге появился форк проекта &lt;a href=&#34;https://github.com/gen1us2k/python-whois&#34;&gt;python-whois-extended&lt;/a&gt;, который расширяет функционал для больших TLD.&lt;/p&gt;

&lt;p&gt;Ок, как внедрить в нагиос?&lt;/p&gt;

&lt;p&gt;Все просто, пишем простой чек&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python#
# Usage:
# python check_domain.py -d DOMAIN
import whois
from datetime import datetime

from sys import exit
from optparse import OptionParser


def check_domain(domain):
    q = whois.query(domain)
    if (q.expiration_date - datetime.now()).days &amp;lt;= 30:
        print &amp;quot;CRITICAL: Domain: {0} expires on {1}&amp;quot;.format(domain, q.expiration_date)
        exit(2)
    print &amp;quot;OK: Domain: {0} expires on {1}&amp;quot;.format(domain, q.expiration_date)

if __name__ == &#39;__main__&#39;:
    parser = OptionParser()
    parser.add_option(&amp;quot;-d&amp;quot;, &amp;quot;--domain&amp;quot;, dest=&amp;quot;domain&amp;quot;, help=&amp;quot;Domain to monitor expiry date&amp;quot;)
    (options, args) = parser.parse_args()
    if not options.domain:
        print parser.print_help()
        exit(0)

    check_domain(options.domain)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Что он делает? Светит красным в мониторинге за месяц до истечения домена.&lt;/p&gt;

&lt;p&gt;Что интересно, появился еще один мейнтейнер, который добавил поддержку для hk, cn и kr TLD.&lt;/p&gt;

&lt;p&gt;Текущий список поддерживаемых доменов такой:&lt;/p&gt;

&lt;p&gt;com, net, org, uk, pl, ru, lv, jp, co_jp, de, at, eu, biz, info, name, us, co, me, be, nz, cz, it, fr, kg, vc, fm, tv, edu, ca, cn, kr, hk&lt;/p&gt;

&lt;p&gt;Пул-реквесты, запросы фич привествуются!&lt;/p&gt;

&lt;p&gt;Надеюсь, мой опыт поможет избавиться от подобной проблемы&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Используем Git в качестве инструмента для деплоя веб приложения</title>
      <link>http://gen1us2k.github.io/2016/03/31/deploy/</link>
      <pubDate>Thu, 31 Mar 2016 15:23:31 +0600</pubDate>
      
      <guid>http://gen1us2k.github.io/2016/03/31/deploy/</guid>
      <description>

&lt;h3 id=&#34;что-имеем:0814af543608f4fd171b2e9cf43d9917&#34;&gt;Что имеем&lt;/h3&gt;

&lt;p&gt;У нас есть веб приложение, которое мы разрабатываем. Нам нужно быстро и легко добавлять изменения на продакшн&lt;/p&gt;

&lt;h4 id=&#34;что-предлагает-нам-git:0814af543608f4fd171b2e9cf43d9917&#34;&gt;Что предлагает нам Git&lt;/h4&gt;

&lt;p&gt;post-merge — Этот хук вызывается ‘git-merge’, после того, как мы выполнили &amp;lsquo;git-pull’ или &amp;lsquo;git-merge’ на локальном репозитории. Хук не выполнится, если у нас будут конфликты при мердже.
post-checkout — Этот хук вызывается &amp;lsquo;git-checkout’, после того, как мы выполним &amp;lsquo;git-clone’ или &amp;lsquo;git-checkout’.&lt;/p&gt;

&lt;h4 id=&#34;что-делаем:0814af543608f4fd171b2e9cf43d9917&#34;&gt;Что делаем&lt;/h4&gt;

&lt;p&gt;Механизм деплоя будет примерно таким:
1. Поднимаем git сервер. Переводим всю разработку на git. Протестированный код заливаем в репозиторий
2. Пишем хуки, которые будут делать то, что нам нужно сделать после деплоя. В данном случае хук post-merge.
3. Если хотим развернуть рабочую конфигурацию на чистом сервере, то пишем хук post-checkout&lt;/p&gt;

&lt;h4 id=&#34;к-примеру-нам-после-деплоя-надо-почистить-какую-то-папку-и-перезагрузить-апач:0814af543608f4fd171b2e9cf43d9917&#34;&gt;К примеру, нам после деплоя надо почистить какую-то папку и перезагрузить апач.&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash /etc/init.d/apache2 stop find /path/to/folder -type f -delete /etc/init.d/apache2 start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Положим этот скрипт в .git/hooks/post-merge.
Выполняем git pull и у нас выполняется этот скрипт&lt;/p&gt;

&lt;p&gt;Аналогично и для хука post-checkout&lt;/p&gt;

&lt;p&gt;Плюсы:&lt;/p&gt;

&lt;p&gt;Быстрая доставка изменений на продакшн.
Автоматизация
Централизированное хранение рабочего веб проекта&lt;/p&gt;

&lt;p&gt;Минусы:&lt;/p&gt;

&lt;p&gt;Данная схема не будет работать, если мы будем создавать новые ветки, путем git checkout -b newBranch
Данная схема не будет работать, если мы будем вручную мерджить изменения в локальном хранилище.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>